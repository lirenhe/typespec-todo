// Code generated by Microsoft (R) TypeSpec Code Generator.

package todo.implementation;

import io.clientcore.core.annotation.ServiceInterface;
import io.clientcore.core.http.RestProxy;
import io.clientcore.core.http.annotation.BodyParam;
import io.clientcore.core.http.annotation.HeaderParam;
import io.clientcore.core.http.annotation.HostParam;
import io.clientcore.core.http.annotation.HttpRequestInformation;
import io.clientcore.core.http.annotation.PathParam;
import io.clientcore.core.http.annotation.UnexpectedResponseExceptionDetail;
import io.clientcore.core.http.exception.HttpResponseException;
import io.clientcore.core.http.models.HttpMethod;
import io.clientcore.core.http.models.RequestOptions;
import io.clientcore.core.http.models.Response;
import io.clientcore.core.util.binarydata.BinaryData;
import todo.todoitems.models.PageTodoAttachment;

/**
 * An instance of this class provides access to all the operations defined in TodoItemsAttachments.
 */
public final class TodoItemsAttachmentsImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final TodoItemsAttachmentsService service;

    /**
     * The service client containing this operation class.
     */
    private final TodoClientImpl client;

    /**
     * Initializes an instance of TodoItemsAttachmentsImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    TodoItemsAttachmentsImpl(TodoClientImpl client) {
        this.service = RestProxy.create(TodoItemsAttachmentsService.class, client.getHttpPipeline());
        this.client = client;
    }

    /**
     * The interface defining all the services for TodoClientTodoItemsAttachments to be used by the proxy service to
     * perform REST calls.
     */
    @ServiceInterface(name = "TodoClientTodoItemsA", host = "{endpoint}")
    public interface TodoItemsAttachmentsService {
        @HttpRequestInformation(
            method = HttpMethod.GET,
            path = "/items/{itemId}/attachments",
            expectedStatusCodes = { 200, 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<PageTodoAttachment> listSync(@HostParam("endpoint") String endpoint, @PathParam("itemId") long itemId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions);

        @HttpRequestInformation(
            method = HttpMethod.POST,
            path = "/items/{itemId}/attachments",
            expectedStatusCodes = { 204, 404 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "CLIENT_AUTHENTICATION", statusCode = { 401 })
        @UnexpectedResponseExceptionDetail(exceptionTypeName = "RESOURCE_MODIFIED", statusCode = { 409 })
        @UnexpectedResponseExceptionDetail
        Response<Void> createAttachmentSync(@HostParam("endpoint") String endpoint, @PathParam("itemId") long itemId,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData contents, RequestOptions requestOptions);
    }

    /**
     * The list operation.
     * 
     * @param itemId The itemId parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<PageTodoAttachment> listWithResponse(long itemId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.listSync(this.client.getEndpoint(), itemId, accept, requestOptions);
    }

    /**
     * The createAttachment operation.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param itemId The itemId parameter.
     * @param contents The contents parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the service returns an error.
     * @return the response.
     */
    public Response<Void> createAttachmentWithResponse(long itemId, BinaryData contents,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createAttachmentSync(this.client.getEndpoint(), itemId, contentType, accept, contents,
            requestOptions);
    }
}
